[tool.ruff.lint]
# Включаем все доступные правила Ruff
select = [
    "A",     # flake8-builtins
    "ANN",   # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C",     # mccabe, flake8-comprehensions
    "COM",   # flake8-commas
    "D",     # pydocstyle
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle (errors)
    "EM",    # flake8-errmsg
    "ERA",   # flake8-eradicate
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "FBT",   # flake8-boolean-trap
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "N",     # pep8-naming
    "NPY",   # NumPy-specific rules
    "PD",    # pandas-vet
    "PERF",  # perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PL",    # Pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "R",     # flake8-return
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T",     # flake8-print
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle (warnings)
    "YTT",   # flake8-2020
]
ignore = [
    # Multi-line docstring summary should start at the first line
    "D212",
    # No blank lines allowed after function docstring (found {num_lines})
    "D202",
    # Probable insecure usage of temporary file or directory: "{}"
    "S108",
    # Missing docstring in public module
    "D100",
    # Logging statement uses f-string
    "G004",
    # Possible SQL injection vector through string-based query construction
    "S608",
    # Checks for docstrings on class definitions that are not preceded by a blank line.
    "D203",
    # Checks for uses of the assert keyword.
    "S101",
    # Checks for module names that do not follow the snake_case naming convention or are otherwise invalid.
    "N999",
    # Checks for print statements.
    "T201",
    # Although df is a common variable name for a Pandas DataFrame, it's not a great variable name for production code
    "PD901",
    # Checks for ambiguous Unicode characters in comments.
    "RUF001", "RUF002", "RUF003",
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff]
# Same as Black.
line-length = 120

# Assume Python 3.12.
target-version = "py312"

[tool.poetry]
name = "foo"
version = "0.0.1"
description = ""
authors = ["Ivan Korsakov <korsakov@example.com>"]
license = "MIT"
readme = "README.md"
package-mode = false

[tool.poetry.urls]
"Homepage" = ""
"Bug Tracker" = ""
"PyPi" = ""

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.dependencies]
python = ">=3.12.1,<3.13"
ruff = "^0.8.4"
# Добавленные зависимости
Faker = "37.3.0"
pandas = "2.2.3"
SQLAlchemy = "2.0.41"
psycopg2 = "2.9.10"